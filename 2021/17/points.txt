6,9     
6,8     
6,7     
6,6     
6,5
6,4     
6,3     
6,2     
6,1     
6,0

102
7,9 
7,8
7,7     
7,6     
7,5     
7,4
7,3     
7,2     
7,1     
7,0     
7,-1  

91
8,1     
8,0     
8,-2    
8,-1   

87
9,0     
9,-2    
9,-1

84
10,-2
10,-1

82
11,-4   
11,-3   
11,-2   
11,-1

78
steps: 2
12,-4   
12,-3   
12,-2  

75
steps: 2
13,-4   
13,-3
13,-2   

72
steps: 2
14,-4   
14,-3
14,-2   

69
steps: 2
15,-4   
15,-3   
15,-2 

66
20,-9   
20,-8   
20,-7   
20,-6   
20,-5   
20,-10  

21,-9   
21,-8   
21,-7   
21,-6
21,-5
21,-10  
  
22,-9   
22,-8   
22,-7   
22,-6   
22,-5   
22,-10  

23,-9   
23,-8   
23,-7
23,-6   
23,-5   
23,-10  

24,-9   
24,-8   
24,-7
24,-6   
24,-5
24,-10 

25,-9   
25,-8
25,-7   
25,-6   
25,-5   
25,-10 

26,-9   
26,-8   
26,-7   
26,-6   
26,-5   
26,-10  
 
27,-9   
27,-8   
27,-7   
27,-6
27,-5   
27,-10  

28,-9   
28,-8   
28,-7
28,-6   
28,-5   
28,-10

29,-9   
29,-8   
29,-7   
29,-6   
29,-5
29,-10 
  
30,-9   
30,-8   
30,-7   
30,-6   
30,-5   
30,-10     
 


Start with the direct velocities (e.g. 20, -5), it takes one step to get there.
Once those are all covered, then pick x and add x-1,x-2,etc. until you get to a number that falls within the x bounds.
e.g. x = 15, 15 + 14 = 29, that falls within the bounds, so then calculate y values that also fit.
The y value calculation will be determined by the number of x steps available. e.g. for x = 15, it takes two steps to get to the destination, so we also need y values that can get us there in two steps.
with x = 6, we make it all the way to x = 0 velocity, so there is more range in the number of x steps, however we can limit our y search to ymax. Need to think on this one some more.
Can constrain y search to math.abs(ymin) (e.g. 10) > y > ymin (e.g. -10)